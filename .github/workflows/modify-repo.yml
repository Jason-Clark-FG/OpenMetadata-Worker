name: "Worker: Modify Work Repo"

on:
  workflow_run:
    workflows: ["Worker: Mirror Copy to Work Repo"]
    types:
      - completed
  workflow_dispatch:

env:
  MEND_CONFIG_FILE: ".whitesource"
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Show Info
      - name: "Show: Info"
        run: |
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "FG_USER: ${{ vars.FG_USER }}"
          echo "FG_USERNAME: ${{ vars.FG_USERNAME }}"
          echo "FG_DOMAIN: ${{ vars.FG_DOMAIN }}"
          echo "FG_COMPOSE_TARGET: ${{ vars.FG_COMPOSE_TARGET }}"
          ls -laR ${GITHUB_WORKSPACE}
          ls -la ${GITHUB_WORKSPACE}/../
          ls -la ${GITHUB_WORKSPACE}/../../
          env | sort

      # Checkout our local mirror
      # The public SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example, `ssh-keyscan github.com`.
      - uses: actions/checkout@v3
        with:
          repository: Jason-Clark-FG/OpenMetadata-FG
          fetch-depth: 0
          ssh-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          # token: ${{ secrets.FG_READONLY_TOKEN }}

      # Show Info
      - name: "Show: Info"
        run: |
          echo "REPO_DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)" >> $GITHUB_ENV
          ls -la ${GITHUB_WORKSPACE}/
          ls -la ${GITHUB_WORKSPACE}/../
          ls -la ${GITHUB_WORKSPACE}/../../
          env | sort

      # Modify the target docker-conpose file
      - name: Perform Mend Modification
        run: |
          git config --global user.email "${{ vars.FG_USERNAME }}@${{ vars.FG_DOMAIN }}"
          git config --global user.name "${{ vars.FG_USER }}"
          git status
          # git switch ${{ github.event.repository.default_branch }}
          git switch ${{ env.REPO_DEFAULT_BRANCH }}
          git pull
          set -x
          which jq >/dev/null 2>&1;echo $?
          # Whitesource (Mend.io) template
          # echo '{"scanSettings":{"configMode":"AUTO","configExternalURL":"","projectToken":"","baseBranches":[]},"scanSettingsSAST":{"enableScan":false,"scanPullRequests":false,"incrementalScan":true,"baseBranches":[],"snippetSize":10},"checkRunSettings":{"vulnerableCheckRunConclusionLevel":"failure","displayMode":"diff","useMendCheckNames":true},"checkRunSettingsSAST":{"checkRunConclusionLevel":"failure","severityThreshold":"high"},"issueSettings":{"minSeverityLevel":"LOW","issueType":"DEPENDENCY"},"remediateSettings":{"workflowRules":{"enabled":true}}}' | jq ".scanSettings.baseBranches[0] |= \"${{ vars.RELEASE_BRANCH }}\" | .scanSettingsSAST.baseBranches[0] |= \"${{ vars.RELEASE_BRANCH }}\"" | tee ./${{ env.MEND_CONFIG_FILE }}
          echo '{"scanSettings":{"configMode":"AUTO","configExternalURL":"","projectToken":"","baseBranches":[]},"scanSettingsSAST":{"enableScan":false,"scanPullRequests":false,"incrementalScan":true,"baseBranches":[],"snippetSize":10},"checkRunSettings":{"vulnerableCheckRunConclusionLevel":"failure","displayMode":"diff","useMendCheckNames":true},"checkRunSettingsSAST":{"checkRunConclusionLevel":"failure","severityThreshold":"high"},"issueSettings":{"minSeverityLevel":"LOW","issueType":"DEPENDENCY"},"remediateSettings":{"workflowRules":{"enabled":true}}}' | jq "(.scanSettings.baseBranches[0],.scanSettingsSAST.baseBranches[0]) |= \"${{ vars.RELEASE_BRANCH }}\" | (.scanSettings.baseBranches[1],.scanSettingsSAST.baseBranches[1]) |= \"${{ env.REPO_DEFAULT_BRANCH }}\"" | tee ./${{ env.MEND_CONFIG_FILE }}
          set +x
          git status
          git add ./${{ env.MEND_CONFIG_FILE }}
          git commit -m "chore: Inject ${{ env.MEND_CONFIG_FILE }}"
          git push
          git status

      # Modify the target docker-conpose file
      - name: Perform Compose Modification
        run: |
          git config --global user.email "${{ vars.FG_USERNAME }}@${{ vars.FG_DOMAIN }}"
          git config --global user.name "${{ vars.FG_USER }}"
          git status
          git pull
          git switch "${{ vars.RELEASE_BRANCH }}"
          git status
          git switch -C "${{ vars.RELEASE_BRANCH }}-FG"
          set -x
          which yq >/dev/null 2>&1;echo $?
          compose_top_level_name="${${{ vars.FG_COMPOSE_TOP_LEVEL_NAME }}:-openmetadata}"
          top_level_name=$(yq ".name" ${{ vars.FG_COMPOSE_TARGET }})
          if [[ ${top_level_name} == null ]];then echo "Adding top-level name";yq -i ".name = \"${compose_top_level_name}\"" ${{ vars.FG_COMPOSE_TARGET }};fi
          key_list=$(yq '.services | keys' ${{ vars.FG_COMPOSE_TARGET }} | cut -c '2-')
          for key in ${key_list};do restart_value=$(yq ".services.${key}.restart" ${{ vars.FG_COMPOSE_TARGET }});if [[ $restart_value == null ]];then echo "Adding restart to ${key}";yq -i ".services.${key}.restart = \"always\"" ${{ vars.FG_COMPOSE_TARGET }};fi;done
          # Incorporate healthcheck fix
          yq -i '.services.openmetadata-server.healthcheck.test = ["CMD", "wget", "-q", "--spider", "http://localhost:8586/healthcheck"]' ${{ vars.FG_COMPOSE_TARGET }}
          set +x
          git status
          git add ${{ vars.FG_COMPOSE_TARGET }}
          git commit -m "chore: Modify ${{ vars.FG_COMPOSE_TARGET }}"
          git push --force --set-upstream origin "${{ vars.RELEASE_BRANCH }}-FG"
          git status
