name: "Worker: Step 4.3 - Rebuild Container 1"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * 6'
  push:
    branches: [ "main", "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main", "master" ]

env:
  # Use ghcr.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_BASENAME: "openmetadata-db"
  # IMAGE_BASENAME: "openmetadata-server"
  # IMAGE_BASENAME: "openmetadata-ingestion"
  # IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: "openmetadata-db"
  # IMAGE_NAME: "openmetadata-server"
  # IMAGE_NAME: "openmetadata-ingestion"
  IMAGE_FILE: "./docker/mysql/Dockerfile_mysql"
  # IMAGE_FILE: "./docker/docker-compose-quickstart/Dockerfile"
  # IMAGE_FILE: "./ingestion/Dockerfile"
  IMAGE_CURRENT_LABEL: "latest"
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}

jobs:
  # Ref: https://www.cynkra.com/blog/2020-12-23-dynamic-gha/
  # Ref: https://tomasvotruba.com/blog/2020/11/16/how-to-make-dynamic-matrix-in-github-actions/
  # Ref: https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/#new-fromjson-method-in-expressions
  # Ref: https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
  matrix:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    if: ${{ github.event_name == 'schedule'  || github.event_name == 'workflow_dispatch' }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: |
        if [[ ${{ vars.DEV_RELEASE_BRANCH }} != ${{ vars.PROD_RELEASE_BRANCH }} ]];then
          echo "matrix={\"release_branch\":[\"${{ vars.DEV_RELEASE_BRANCH }}\",\"${{ vars.PROD_RELEASE_BRANCH }}\"]}" >> $GITHUB_OUTPUT
        else
          echo "matrix={\"release_branch\":[\"${{ vars.PROD_RELEASE_BRANCH }}\"]}" >> $GITHUB_OUTPUT
        fi

  build:
    runs-on: ubuntu-latest
    needs: matrix
    permissions:
      security-events: write
      actions: read
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}

    steps:
    # Checkout
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: Jason-Clark-FG/OpenMetadata-FG
        fetch-depth: 0
        ssh-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
        ref: "${{ matrix.release_branch }}-${{ vars.BRANCH_SUFFIX }}"

    # # Ref: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#example-of-writing-an-environment-variable-to-github_env
    # - name: Additional Variables
    #   run: |
    #     echo "IMAGE_NAME=${{ secrets.DOCKER_USER }}/${{ env.IMAGE_BASENAME }}" >> $GITHUB_ENV

    # Show Info
    - name: "Show: Info"
      run: |
        ls -lDR ${GITHUB_WORKSPACE} | grep ':$'
        env | sort

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
      with:
        cosign-release: 'v2.1.1'

    # Docker Buildx
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Modify Dockerfile
      id: modify-dockerfile
      run: |
        cat ${{ env.IMAGE_FILE }}
        sed -i -e '/^RUN\ .*/iHEALTHCHECK --interval=15s --timeout=10s --retries=10 CMD mysql --user=root --password=${MYSQL_ROOT_PASSWORD} --silent --execute "use ${OM_DATABASE}" 2>/dev/null || exit 1' ${{ env.IMAGE_FILE }}
        cat ${{ env.IMAGE_FILE }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v4
      with:
        # context: ${GITHUB_WORKSPACE}/OpenMetadata-FG/
        context: .
        file: ${{ env.IMAGE_FILE }}
        push: ${{ github.event_name != 'pull_request' }}
        # tags: ${{ steps.meta.outputs.tags }}
        tags: |
          ${{ env.IMAGE_NAME }}:${{ env.IMAGE_CURRENT_LABEL }}
          ${{ env.IMAGE_NAME }}:${{ matrix.release_branch }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=${{ env.IMAGE_BASENAME }}
          org.opencontainers.image.url=https://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Show Info
    - name: "Show: Info"
      run: |
        ls -lDR ${GITHUB_WORKSPACE}/../ | grep ':$'
        env | sort

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
